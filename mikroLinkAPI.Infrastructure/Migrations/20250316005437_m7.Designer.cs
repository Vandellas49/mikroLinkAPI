// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mikroLinkAPI.Infrastructure.Context;

#nullable disable

namespace mikroLinkAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316005437_m7")]
    partial class m7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AccountAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("TeamId");

                    b.ToTable("AccountAuthority");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AccountSsom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("binary(150)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumberTwo")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccountSSOM", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AuthoritySsom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UygulamaKodu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("YetkiKodu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AuthoritySSOM", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("IlId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.CompanySiteAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SiteId");

                    b.ToTable("CompanySiteAuthorization");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.CompanyToCompanyAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ParentCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("CompanyToCompanyAuthorization");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Component", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EquipmentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MalzemeTuru")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.ComponentSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ComponentId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Defective")
                        .HasColumnType("int");

                    b.Property<string>("GIrsaliyeNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("G_IrsaliyeNo");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<int>("Scrap")
                        .HasColumnType("int");

                    b.Property<string>("SeriNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Sturdy")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SeriNo")
                        .IsUnique()
                        .HasDatabaseName("UX_Constraint")
                        .HasFilter("[SeriNo] <> 'Sarfmalzeme'");

                    b.HasIndex("SiteId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("ComponentSerial", t =>
                        {
                            t.HasTrigger("triggerComponentSerialAdd");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.FileRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileRecord");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.FirmaMalzemeBarcode", b =>
                {
                    b.Property<byte[]>("Barcode")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("binary(5000)")
                        .IsFixedLength();

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ToTable("FirmaMalzemeBarcode");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Ilceler", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Ilce")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ilce");

                    b.Property<int>("Sehir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Sehir");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sehir"));

                    b.HasKey("Id");

                    b.ToTable("Ilceler", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Iller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Sehir")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Sehir");

                    b.HasKey("Id");

                    b.ToTable("Iller", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.MaterialTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CserialId")
                        .HasColumnType("int")
                        .HasColumnName("CSerialId");

                    b.Property<int>("Defective")
                        .HasColumnType("int");

                    b.Property<int>("Scrap")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Sturdy")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CserialId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("MaterialTracking");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.MysLislem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MysLdbIp")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MYS_LDB_IP");

                    b.Property<string>("MysLdbUygKodu")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MYS_LDB_UYG_KODU");

                    b.Property<string>("MysLisDname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MYS_LIS_DNAME");

                    b.Property<string>("MysLisGuid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("MYS_LIS_GUID");

                    b.Property<DateTime>("MysLisTstmp")
                        .HasColumnType("datetime")
                        .HasColumnName("MYS_LIS_TSTMP");

                    b.HasKey("Id");

                    b.ToTable("MYS_LISLEM", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Randevu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Durum")
                        .HasColumnType("int");

                    b.Property<int>("RadevuPlanId")
                        .HasColumnType("int");

                    b.Property<int>("TeamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RadevuPlanId")
                        .IsUnique()
                        .HasDatabaseName("UX_Constraint");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("Randevu");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RandevuPlanlanma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("RandevuBaslangic")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("RandevuBitis")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("RandevuTarihi")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "RandevuBaslangic", "RandevuBitis", "RandevuTarihi")
                        .IsUnique()
                        .HasDatabaseName("IDX_UQ_Company_Baslangic_Bitis_Tarih");

                    b.ToTable("RandevuPlanlama");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CanUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverSiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RequestStatu")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("TeamLeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("WhoCanceledId")
                        .HasColumnType("int");

                    b.Property<int>("WhoDoneId")
                        .HasColumnType("int");

                    b.Property<string>("WorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ReceiverCompanyId");

                    b.HasIndex("ReceiverSiteId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TeamLeaderId");

                    b.HasIndex("WhoCanceledId");

                    b.HasIndex("WhoDoneId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RequestSiteCompanySerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CserialId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CserialId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestSiteCompanySerial");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RequestedMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Defective")
                        .HasColumnType("int");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Scrap")
                        .HasColumnType("int");

                    b.Property<int>("Sturdy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestedMaterial");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IlId")
                        .HasColumnType("int");

                    b.Property<string>("KordinatE")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("KordinatN")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SiteTip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Smsverification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VerificationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMSVerification", (string)null);
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.StoreExit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyIdExit")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CserialId")
                        .HasColumnType("int")
                        .HasColumnName("CSerialId");

                    b.Property<int>("Defective")
                        .HasColumnType("int");

                    b.Property<int?>("ExitType")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Scrap")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteIdExit")
                        .HasColumnType("int");

                    b.Property<int>("Sturdy")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeaderIdExit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyIdExit");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CserialId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SiteIdExit");

                    b.HasIndex("TeamLeaderId");

                    b.HasIndex("TeamLeaderIdExit");

                    b.ToTable("StoreExit");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.StoreIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CserialId")
                        .HasColumnType("int")
                        .HasColumnName("CSerialId");

                    b.Property<int>("Defective")
                        .HasColumnType("int");

                    b.Property<int>("EnterType")
                        .HasColumnType("int");

                    b.Property<int?>("FromCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("FromSiteId")
                        .HasColumnType("int");

                    b.Property<int?>("FromTeamLeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Scrap")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Sturdy")
                        .HasColumnType("int");

                    b.Property<int?>("TeamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CserialId");

                    b.HasIndex("FromCompanyId");

                    b.HasIndex("FromSiteId");

                    b.HasIndex("FromTeamLeaderId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("StoreIn");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberOfCar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalDuration")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AccountAuthority", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "Account")
                        .WithMany("AccountAuthority")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountAuthority_AccountSSOM");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AuthoritySsom", "Authority")
                        .WithMany("AccountAuthority")
                        .HasForeignKey("AuthorityId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountAuthority_AuthoritySSOM");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Teams", "Team")
                        .WithMany("AccountAuthority")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_AccountAuthority_Teams");

                    b.Navigation("Account");

                    b.Navigation("Authority");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AccountSsom", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("AccountSsom")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountSSOM_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Company", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Iller", "Il")
                        .WithMany("Company")
                        .HasForeignKey("IlId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_iller");

                    b.Navigation("Il");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.CompanySiteAuthorization", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("CompanySiteAuthorization")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanySiteAuthorization_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("CompanySiteAuthorization")
                        .HasForeignKey("SiteId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanySiteAuthorization_Site");

                    b.Navigation("Company");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.CompanyToCompanyAuthorization", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("CompanyToCompanyAuthorizationCompany")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyToCompanyAuthorization_Company1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "ParentCompany")
                        .WithMany("CompanyToCompanyAuthorizationParentCompany")
                        .HasForeignKey("ParentCompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyToCompanyAuthorization_Company");

                    b.Navigation("Company");

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.ComponentSerial", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("ComponentSerial")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_ComponentSerial_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Component", "Component")
                        .WithMany("ComponentSerial")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK_ComponentSerial_Component");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "WhoDone")
                        .WithMany("ComponentSerialWhoDone")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ComponentSerial_AccountSSOM1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("ComponentSerial")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_ComponentSerial_Site");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("ComponentSerialTeamLeader")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_ComponentSerial_AccountSSOM");

                    b.Navigation("Company");

                    b.Navigation("Component");

                    b.Navigation("Site");

                    b.Navigation("TeamLeader");

                    b.Navigation("WhoDone");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.MaterialTracking", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("MaterialTracking")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MaterialTracking_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.ComponentSerial", "Cserial")
                        .WithMany("MaterialTracking")
                        .HasForeignKey("CserialId")
                        .IsRequired()
                        .HasConstraintName("FK_MaterialTracking_ComponentSerial");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("MaterialTracking")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_MaterialTracking_Site");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("MaterialTracking")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_MaterialTracking_AccountSSOM");

                    b.Navigation("Company");

                    b.Navigation("Cserial");

                    b.Navigation("Site");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Randevu", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.RandevuPlanlanma", "RandevuPlanlanma")
                        .WithOne("Randevu")
                        .HasForeignKey("mikroLinkAPI.Domain.Entities.Randevu", "RadevuPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_Randevu_RandevuPlanlama");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("Randevu")
                        .HasForeignKey("TeamLeaderId")
                        .IsRequired()
                        .HasConstraintName("FK_Randevu_AccountSSOM");

                    b.Navigation("RandevuPlanlanma");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RandevuPlanlanma", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("RadevuPlanlama")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_RandevuPlanlama_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Request", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("RequestCompany")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Request_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "ReceiverCompany")
                        .WithMany("RequestReceiverCompany")
                        .HasForeignKey("ReceiverCompanyId")
                        .HasConstraintName("FK_Request_Company1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "ReceiverSite")
                        .WithMany("RequestReceiverSite")
                        .HasForeignKey("ReceiverSiteId")
                        .HasConstraintName("FK_Request_Site");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("RequestSite")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_Request_Site1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("RequestTeamLeader")
                        .HasForeignKey("TeamLeaderId")
                        .IsRequired()
                        .HasConstraintName("FK_Request_AccountSSOM");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "WhoCanceled")
                        .WithMany("RequestWhoCanceled")
                        .HasForeignKey("WhoCanceledId")
                        .HasConstraintName("FK_Request_AccountSSOM1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "WhoDone")
                        .WithMany("RequestWhoDone")
                        .HasForeignKey("WhoDoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Request_AccountSSOM2");

                    b.Navigation("Company");

                    b.Navigation("ReceiverCompany");

                    b.Navigation("ReceiverSite");

                    b.Navigation("Site");

                    b.Navigation("TeamLeader");

                    b.Navigation("WhoCanceled");

                    b.Navigation("WhoDone");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RequestSiteCompanySerial", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.ComponentSerial", "Cserial")
                        .WithMany("RequestSiteCompanySerial")
                        .HasForeignKey("CserialId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestCompanySerial_ComponentSerial");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Request", "Request")
                        .WithMany("RequestSiteCompanySerial")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestSiteCompanySerial_Request");

                    b.Navigation("Cserial");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RequestedMaterial", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Component", "Component")
                        .WithMany("RequestedMaterial")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestedMaterial_Component");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Request", "Request")
                        .WithMany("RequestedMaterial")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestedMaterial_Request");

                    b.Navigation("Component");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Site", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Iller", "Il")
                        .WithMany("Site")
                        .HasForeignKey("IlId")
                        .IsRequired()
                        .HasConstraintName("FK_Site_iller");

                    b.Navigation("Il");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.StoreExit", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("StoreExitCompany")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_StoreExit_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "CompanyIdExitNavigation")
                        .WithMany("StoreExitCompanyIdExitNavigation")
                        .HasForeignKey("CompanyIdExit")
                        .HasConstraintName("FK_StoreExit_Company1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "WhoDone")
                        .WithMany("StoreExitWhoDone")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_StoreExit_AccountSSOM2");

                    b.HasOne("mikroLinkAPI.Domain.Entities.ComponentSerial", "Cserial")
                        .WithMany("StoreExit")
                        .HasForeignKey("CserialId")
                        .IsRequired()
                        .HasConstraintName("FK_StoreExit_ComponentSerial");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Request", "Request")
                        .WithMany("StoreExit")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_StoreExit_Request");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("StoreExitSite")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_StoreExit_Site");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "SiteIdExitNavigation")
                        .WithMany("StoreExitSiteIdExitNavigation")
                        .HasForeignKey("SiteIdExit")
                        .HasConstraintName("FK_StoreExit_Site1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("StoreExitTeamLeader")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_StoreExit_AccountSSOM");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeaderIdExitNavigation")
                        .WithMany("StoreExitTeamLeaderIdExitNavigation")
                        .HasForeignKey("TeamLeaderIdExit")
                        .HasConstraintName("FK_StoreExit_AccountSSOM1");

                    b.Navigation("Company");

                    b.Navigation("CompanyIdExitNavigation");

                    b.Navigation("Cserial");

                    b.Navigation("Request");

                    b.Navigation("Site");

                    b.Navigation("SiteIdExitNavigation");

                    b.Navigation("TeamLeader");

                    b.Navigation("TeamLeaderIdExitNavigation");

                    b.Navigation("WhoDone");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.StoreIn", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("StoreInCompany")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_StoreIn_Company");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "WhoDone")
                        .WithMany("StoreInWhoDone")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_StoreIn_AccountSSOM2");

                    b.HasOne("mikroLinkAPI.Domain.Entities.ComponentSerial", "Cserial")
                        .WithMany("StoreIn")
                        .HasForeignKey("CserialId")
                        .IsRequired()
                        .HasConstraintName("FK_StoreIn_ComponentSerial");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "FromCompany")
                        .WithMany("StoreInFromCompany")
                        .HasForeignKey("FromCompanyId")
                        .HasConstraintName("FK_StoreIn_Company1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "FromSite")
                        .WithMany("StoreInFromSite")
                        .HasForeignKey("FromSiteId")
                        .HasConstraintName("FK_StoreIn_Site1");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "FromTeamLeader")
                        .WithMany("StoreInFromTeamLeader")
                        .HasForeignKey("FromTeamLeaderId")
                        .HasConstraintName("FK_StoreIn_AccountSSOM");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Request", "Request")
                        .WithMany("StoreIn")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_StoreIn_Request");

                    b.HasOne("mikroLinkAPI.Domain.Entities.Site", "Site")
                        .WithMany("StoreInSite")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_StoreIn_Site");

                    b.HasOne("mikroLinkAPI.Domain.Entities.AccountSsom", "TeamLeader")
                        .WithMany("StoreInTeamLeader")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_StoreIn_AccountSSOM1");

                    b.Navigation("Company");

                    b.Navigation("Cserial");

                    b.Navigation("FromCompany");

                    b.Navigation("FromSite");

                    b.Navigation("FromTeamLeader");

                    b.Navigation("Request");

                    b.Navigation("Site");

                    b.Navigation("TeamLeader");

                    b.Navigation("WhoDone");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Teams", b =>
                {
                    b.HasOne("mikroLinkAPI.Domain.Entities.Company", "Company")
                        .WithMany("Teams")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Teams_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AccountSsom", b =>
                {
                    b.Navigation("AccountAuthority");

                    b.Navigation("ComponentSerialTeamLeader");

                    b.Navigation("ComponentSerialWhoDone");

                    b.Navigation("MaterialTracking");

                    b.Navigation("Randevu");

                    b.Navigation("RequestTeamLeader");

                    b.Navigation("RequestWhoCanceled");

                    b.Navigation("RequestWhoDone");

                    b.Navigation("StoreExitTeamLeader");

                    b.Navigation("StoreExitTeamLeaderIdExitNavigation");

                    b.Navigation("StoreExitWhoDone");

                    b.Navigation("StoreInFromTeamLeader");

                    b.Navigation("StoreInTeamLeader");

                    b.Navigation("StoreInWhoDone");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.AuthoritySsom", b =>
                {
                    b.Navigation("AccountAuthority");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Company", b =>
                {
                    b.Navigation("AccountSsom");

                    b.Navigation("CompanySiteAuthorization");

                    b.Navigation("CompanyToCompanyAuthorizationCompany");

                    b.Navigation("CompanyToCompanyAuthorizationParentCompany");

                    b.Navigation("ComponentSerial");

                    b.Navigation("MaterialTracking");

                    b.Navigation("RadevuPlanlama");

                    b.Navigation("RequestCompany");

                    b.Navigation("RequestReceiverCompany");

                    b.Navigation("StoreExitCompany");

                    b.Navigation("StoreExitCompanyIdExitNavigation");

                    b.Navigation("StoreInCompany");

                    b.Navigation("StoreInFromCompany");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Component", b =>
                {
                    b.Navigation("ComponentSerial");

                    b.Navigation("RequestedMaterial");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.ComponentSerial", b =>
                {
                    b.Navigation("MaterialTracking");

                    b.Navigation("RequestSiteCompanySerial");

                    b.Navigation("StoreExit");

                    b.Navigation("StoreIn");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Iller", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.RandevuPlanlanma", b =>
                {
                    b.Navigation("Randevu");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Request", b =>
                {
                    b.Navigation("RequestSiteCompanySerial");

                    b.Navigation("RequestedMaterial");

                    b.Navigation("StoreExit");

                    b.Navigation("StoreIn");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Site", b =>
                {
                    b.Navigation("CompanySiteAuthorization");

                    b.Navigation("ComponentSerial");

                    b.Navigation("MaterialTracking");

                    b.Navigation("RequestReceiverSite");

                    b.Navigation("RequestSite");

                    b.Navigation("StoreExitSite");

                    b.Navigation("StoreExitSiteIdExitNavigation");

                    b.Navigation("StoreInFromSite");

                    b.Navigation("StoreInSite");
                });

            modelBuilder.Entity("mikroLinkAPI.Domain.Entities.Teams", b =>
                {
                    b.Navigation("AccountAuthority");
                });
#pragma warning restore 612, 618
        }
    }
}
